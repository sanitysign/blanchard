{"version":3,"sources":["webpack://11/./node_modules/imask/esm/masked/number.js"],"names":["MaskedNumber","_Masked","opts","this","call","Object","assign","DEFAULTS","key","value","prototype","_updateRegExps","start","allowNegative","end","scale","radix","_numberRegExpInput","RegExp","_numberRegExp","_mapToRadixRegExp","mapToRadix","map","join","_thousandsSeparatorRegExp","thousandsSeparator","replace","parts","split","str","_get2","_len","arguments","length","args","Array","_key","apply","_removeThousandsSeparators","concat","to","extendOnSeparators","undefined","count","pos","_value","indexOf","slice","_separatorsCount","fromPos","toPos","flags","_this$_adjustRangeWit","_adjustRangeWithSeparators","_this$_adjustRangeWit2","ch","prevBeforeTailValue","tail","_beforeTailState","prevBeforeTailSeparatorsCount","_separatorsCountFromSlice","appendDetails","_insertThousandsSeparators","beforeTailValue","beforeTailSeparatorsCount","tailShift","skip","rawInserted","searchFrom","separatorPos","from","separatorAroundFromPos","_findSeparatorAround","separatorAroundToPos","_this$_adjustRangeWit3","_this$_adjustRangeWit4","valueBeforePos","valueAfterPos","cursorPos","direction","separatorAtLeftPos","separatorAtLeftEndPos","separatorAtRightPos","valid","input","test","number","isNaN","min","max","validnum","Math","unmaskedValue","String","formatted","normalizeZeros","_normalizeZeros","padFractionalZeros","_padFractionalZeros","match","sign","zeros","num","push","padEnd","get","set","Number","n","typedValue","signed"],"mappings":"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","file":"scripts/197.js","sourcesContent":["import { d as _inherits, a as _createClass, b as _classCallCheck, e as _possibleConstructorReturn, f as _getPrototypeOf, g as _get, i as _slicedToArray, h as _set } from '../_rollupPluginBabelHelpers-3c58f0e3.js';\nimport { escapeRegExp, DIRECTION } from '../core/utils.js';\nimport ChangeDetails from '../core/change-details.js';\nimport '../core/continuous-tail-details.js';\nimport IMask from '../core/holder.js';\nimport Masked from './base.js';\n\n/**\r\n  Number mask\r\n  @param {Object} opts\r\n  @param {string} opts.radix - Single char\r\n  @param {string} opts.thousandsSeparator - Single char\r\n  @param {Array<string>} opts.mapToRadix - Array of single chars\r\n  @param {number} opts.min\r\n  @param {number} opts.max\r\n  @param {number} opts.scale - Digits after point\r\n  @param {boolean} opts.signed - Allow negative\r\n  @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing\r\n  @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing\r\n*/\nvar MaskedNumber =\n/*#__PURE__*/\nfunction (_Masked) {\n  _inherits(MaskedNumber, _Masked);\n\n  /** Single char */\n\n  /** Single char */\n\n  /** Array of single chars */\n\n  /** */\n\n  /** */\n\n  /** Digits after point */\n\n  /** */\n\n  /** Flag to remove leading and trailing zeros in the end of editing */\n\n  /** Flag to pad trailing zeros after point in the end of editing */\n  function MaskedNumber(opts) {\n    _classCallCheck(this, MaskedNumber);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MaskedNumber).call(this, Object.assign({}, MaskedNumber.DEFAULTS, {}, opts)));\n  }\n  /**\r\n    @override\r\n  */\n\n\n  _createClass(MaskedNumber, [{\n    key: \"_update\",\n    value: function _update(opts) {\n      _get(_getPrototypeOf(MaskedNumber.prototype), \"_update\", this).call(this, opts);\n\n      this._updateRegExps();\n    }\n    /** */\n\n  }, {\n    key: \"_updateRegExps\",\n    value: function _updateRegExps() {\n      // use different regexp to process user input (more strict, input suffix) and tail shifting\n      var start = '^' + (this.allowNegative ? '[+|\\\\-]?' : '');\n      var midInput = '(0|([1-9]+\\\\d*))?';\n      var mid = '\\\\d*';\n      var end = (this.scale ? '(' + escapeRegExp(this.radix) + '\\\\d{0,' + this.scale + '})?' : '') + '$';\n      this._numberRegExpInput = new RegExp(start + midInput + end);\n      this._numberRegExp = new RegExp(start + mid + end);\n      this._mapToRadixRegExp = new RegExp('[' + this.mapToRadix.map(escapeRegExp).join('') + ']', 'g');\n      this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\n    }\n    /** */\n\n  }, {\n    key: \"_removeThousandsSeparators\",\n    value: function _removeThousandsSeparators(value) {\n      return value.replace(this._thousandsSeparatorRegExp, '');\n    }\n    /** */\n\n  }, {\n    key: \"_insertThousandsSeparators\",\n    value: function _insertThousandsSeparators(value) {\n      // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n      var parts = value.split(this.radix);\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n      return parts.join(this.radix);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: \"doPrepare\",\n    value: function doPrepare(str) {\n      var _get2;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_get2 = _get(_getPrototypeOf(MaskedNumber.prototype), \"doPrepare\", this)).call.apply(_get2, [this, this._removeThousandsSeparators(str.replace(this._mapToRadixRegExp, this.radix))].concat(args));\n    }\n    /** */\n\n  }, {\n    key: \"_separatorsCount\",\n    value: function _separatorsCount(to) {\n      var extendOnSeparators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var count = 0;\n\n      for (var pos = 0; pos < to; ++pos) {\n        if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {\n          ++count;\n          if (extendOnSeparators) to += this.thousandsSeparator.length;\n        }\n      }\n\n      return count;\n    }\n    /** */\n\n  }, {\n    key: \"_separatorsCountFromSlice\",\n    value: function _separatorsCountFromSlice() {\n      var slice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._value;\n      return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: \"extractInput\",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var flags = arguments.length > 2 ? arguments[2] : undefined;\n\n      var _this$_adjustRangeWit = this._adjustRangeWithSeparators(fromPos, toPos);\n\n      var _this$_adjustRangeWit2 = _slicedToArray(_this$_adjustRangeWit, 2);\n\n      fromPos = _this$_adjustRangeWit2[0];\n      toPos = _this$_adjustRangeWit2[1];\n      return this._removeThousandsSeparators(_get(_getPrototypeOf(MaskedNumber.prototype), \"extractInput\", this).call(this, fromPos, toPos, flags));\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: \"_appendCharRaw\",\n    value: function _appendCharRaw(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!this.thousandsSeparator) return _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n      var prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n\n      var prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);\n\n      this._value = this._removeThousandsSeparators(this.value);\n\n      var appendDetails = _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n\n      this._value = this._insertThousandsSeparators(this._value);\n      var beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n\n      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);\n\n      appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;\n      appendDetails.skip = !appendDetails.rawInserted && ch === this.thousandsSeparator;\n      return appendDetails;\n    }\n    /** */\n\n  }, {\n    key: \"_findSeparatorAround\",\n    value: function _findSeparatorAround(pos) {\n      if (this.thousandsSeparator) {\n        var searchFrom = pos - this.thousandsSeparator.length + 1;\n        var separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);\n        if (separatorPos <= pos) return separatorPos;\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"_adjustRangeWithSeparators\",\n    value: function _adjustRangeWithSeparators(from, to) {\n      var separatorAroundFromPos = this._findSeparatorAround(from);\n\n      if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;\n\n      var separatorAroundToPos = this._findSeparatorAround(to);\n\n      if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;\n      return [from, to];\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n      var _this$_adjustRangeWit3 = this._adjustRangeWithSeparators(fromPos, toPos);\n\n      var _this$_adjustRangeWit4 = _slicedToArray(_this$_adjustRangeWit3, 2);\n\n      fromPos = _this$_adjustRangeWit4[0];\n      toPos = _this$_adjustRangeWit4[1];\n      var valueBeforePos = this.value.slice(0, fromPos);\n      var valueAfterPos = this.value.slice(toPos);\n\n      var prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);\n\n      this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\n\n      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);\n\n      return new ChangeDetails({\n        tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length\n      });\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: \"nearestInputPos\",\n    value: function nearestInputPos(cursorPos, direction) {\n      if (!this.thousandsSeparator) return cursorPos;\n\n      switch (direction) {\n        case DIRECTION.NONE:\n        case DIRECTION.LEFT:\n        case DIRECTION.FORCE_LEFT:\n          {\n            var separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);\n\n            if (separatorAtLeftPos >= 0) {\n              var separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;\n\n              if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === DIRECTION.FORCE_LEFT) {\n                return separatorAtLeftPos;\n              }\n            }\n\n            break;\n          }\n\n        case DIRECTION.RIGHT:\n        case DIRECTION.FORCE_RIGHT:\n          {\n            var separatorAtRightPos = this._findSeparatorAround(cursorPos);\n\n            if (separatorAtRightPos >= 0) {\n              return separatorAtRightPos + this.thousandsSeparator.length;\n            }\n          }\n      }\n\n      return cursorPos;\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: \"doValidate\",\n    value: function doValidate(flags) {\n      var regexp = flags.input ? this._numberRegExpInput : this._numberRegExp; // validate as string\n\n      var valid = regexp.test(this._removeThousandsSeparators(this.value));\n\n      if (valid) {\n        // validate as number\n        var number = this.number;\n        valid = valid && !isNaN(number) && ( // check min bound for negative values\n        this.min == null || this.min >= 0 || this.min <= this.number) && ( // check max bound for positive values\n        this.max == null || this.max <= 0 || this.number <= this.max);\n      }\n\n      return valid && _get(_getPrototypeOf(MaskedNumber.prototype), \"doValidate\", this).call(this, flags);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: \"doCommit\",\n    value: function doCommit() {\n      if (this.value) {\n        var number = this.number;\n        var validnum = number; // check bounds\n\n        if (this.min != null) validnum = Math.max(validnum, this.min);\n        if (this.max != null) validnum = Math.min(validnum, this.max);\n        if (validnum !== number) this.unmaskedValue = String(validnum);\n        var formatted = this.value;\n        if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\n        if (this.padFractionalZeros) formatted = this._padFractionalZeros(formatted);\n        this._value = formatted;\n      }\n\n      _get(_getPrototypeOf(MaskedNumber.prototype), \"doCommit\", this).call(this);\n    }\n    /** */\n\n  }, {\n    key: \"_normalizeZeros\",\n    value: function _normalizeZeros(value) {\n      var parts = this._removeThousandsSeparators(value).split(this.radix); // remove leading zeros\n\n\n      parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, function (match, sign, zeros, num) {\n        return sign + num;\n      }); // add leading zero\n\n      if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\n\n      if (parts.length > 1) {\n        parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros\n\n        if (!parts[1].length) parts.length = 1; // remove fractional\n      }\n\n      return this._insertThousandsSeparators(parts.join(this.radix));\n    }\n    /** */\n\n  }, {\n    key: \"_padFractionalZeros\",\n    value: function _padFractionalZeros(value) {\n      if (!value) return value;\n      var parts = value.split(this.radix);\n      if (parts.length < 2) parts.push('');\n      parts[1] = parts[1].padEnd(this.scale, '0');\n      return parts.join(this.radix);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: \"unmaskedValue\",\n    get: function get() {\n      return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, '.');\n    },\n    set: function set(unmaskedValue) {\n      _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", unmaskedValue.replace('.', this.radix), this, true);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: \"typedValue\",\n    get: function get() {\n      return Number(this.unmaskedValue);\n    },\n    set: function set(n) {\n      _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", String(n), this, true);\n    }\n    /** Parsed Number */\n\n  }, {\n    key: \"number\",\n    get: function get() {\n      return this.typedValue;\n    },\n    set: function set(number) {\n      this.typedValue = number;\n    }\n    /**\r\n      Is negative allowed\r\n      @readonly\r\n    */\n\n  }, {\n    key: \"allowNegative\",\n    get: function get() {\n      return this.signed || this.min != null && this.min < 0 || this.max != null && this.max < 0;\n    }\n  }]);\n\n  return MaskedNumber;\n}(Masked);\nMaskedNumber.DEFAULTS = {\n  radix: ',',\n  thousandsSeparator: '',\n  mapToRadix: ['.'],\n  scale: 2,\n  signed: false,\n  normalizeZeros: true,\n  padFractionalZeros: false\n};\nIMask.MaskedNumber = MaskedNumber;\n\nexport default MaskedNumber;\n"],"sourceRoot":""}